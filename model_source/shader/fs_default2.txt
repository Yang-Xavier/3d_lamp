#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;
 
uniform vec3 viewPos;
uniform sampler2D first_texture;
uniform sampler2D second_texture;


struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 
  
uniform Material material;

struct DirLight {
  vec3 direction;
  
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

uniform DirLight dir_light;

vec3 calcDirLight() {
  // ambient
  vec3 ambient = dir_light.ambient * vec3(texture(first_texture, aTexCoord));

  // diffuse
  vec3 norm = normalize(aNormal);
  vec3 lightDir = normalize(-dir_light.direction);
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = dir_light.diffuse * diff * vec3(texture(first_texture, aTexCoord)); 
  
  // specular 
  vec3 viewDir = normalize(viewPos - aPos);
  vec3 reflectDir = reflect(-lightDir, norm);  
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = dir_light.specular * spec * vec3(texture(second_texture, aTexCoord));

  return (ambient + diffuse + specular);
}

struct FlashLight {
  vec3  position;
  vec3  direction;
  float cutOff;
  
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
}

uniform FlashLight flash_light;

void calcFlashLight() {
	float theta = dot(lightDir, normalize(-light.direction));
	if(theta > light.cutOff) 
	{       
	  // ambient
	  vec3 ambient = flash_light.ambient * vec3(texture(first_texture, aTexCoord));
	
	  // diffuse
	  vec3 norm = normalize(aNormal);
	  vec3 lightDir = normalize(-flash_light.direction);  
	  float diff = max(dot(norm, lightDir), 0.0);
	  vec3 diffuse = flash_light.diffuse * diff * vec3(texture(first_texture, aTexCoord)); 
	  
	  // specular 
	  vec3 viewDir = normalize(viewPos - aPos);
	  vec3 reflectDir = reflect(-lightDir, norm);  
	  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	  vec3 specular = flash_light.specular * spec * vec3(texture(second_texture, aTexCoord));
	
	  return (ambient + diffuse + specular);
	  
	}
}

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

uniform Light light;

void calcNormalLight() {
  // ambient
  vec3 ambient = light.ambient * vec3(texture(first_texture, aTexCoord));

  // diffuse
  vec3 norm = normalize(aNormal);
  vec3 lightDir = normalize(light.position - aPos);  
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = light.diffuse * diff * vec3(texture(first_texture, aTexCoord)); 
  
  // specular 
  vec3 viewDir = normalize(viewPos - aPos);
  vec3 reflectDir = reflect(-lightDir, norm);  
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = light.specular * spec * vec3(texture(second_texture, aTexCoord));

  return (ambient + diffuse + specular);
}

void main() {
  vec3 output = vec3(0.0);
  // add the directional light's contribution to the output
  output += calcDirLight();
  
  // do the same for all point lights
  //for(int i = 0; i < nr_of_point_lights; i++)
  //	output += someFunctionToCalculatePointLight();
  // and add others lights as well (like spotlights)
  //output += someFunctionToCalculateSpotLight();
  
  FragColor = vec4(output, 1.0);
  
}
